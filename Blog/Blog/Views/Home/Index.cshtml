@{
    Layout = null;
}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>To my dear lover</title>

    <link type="text/css" rel="stylesheet" href="./Content/default.css">
    <script type="text/javascript" src="./Content/jquery.min.js"></script>
    <script type="text/javascript" src="./Content/jscex.min.js"></script>
    <script type="text/javascript" src="./Content/jscex-parser.js"></script>
    <script type="text/javascript" src="./Content/jscex-jit.js"></script>
    <script type="text/javascript" src="./Content/jscex-builderbase.min.js"></script>
    <script type="text/javascript" src="./Content/jscex-async.min.js"></script>
    <script type="text/javascript" src="./Content/jscex-async-powerpack.min.js"></script>
    <script type="text/javascript" src="./Content/functions.js" charset="utf-8"></script>
    <script type="text/javascript" src="./Content/love.js" charset="utf-8"></script>
    <style type="text/css">
        <!--
        .STYLE1 {
            color: #666666;
        }
        -->
        html {
            overflow: hidden;
        }

        body {
            position: absolute;
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        #screen {
            position: absolute;
            left: 10%;
            top: 10%;
            width: 80%;
            height: 80%;
        }

            #screen img {
                position: absolute;
                cursor: pointer;
                visibility: hidden;
                width: 0px;
                height: 0px;
            }

            #screen .tvover {
                border: solid #876;
                opacity: 1;
                filter: alpha(opacity=100);
            }

            #screen .tvout {
                border: solid #fff;
                opacity: 0.7;
            }

        #bankImages {
            display: none;
        }
    </style>
</head>
<body>
    <div id="screen"></div>

<div id="bankImages">
	<img alt="" src="/Content/images/1.jpg">
	<img alt="" src="/Content/images/2.jpg">
	<img alt="" src="/Content/images/3.jpg">
	<img alt="" src="/Content/images/4.jpg">

	<img alt="" src="/Content/images/5.jpg">
	<img alt="" src="/Content/images/6.jpg">
	<img alt="" src="/Content/images/7.jpg">
	<img alt="" src="/Content/images/8.jpg">

	<img alt="" src="/Content/images/9.jpg">
	<img alt="" src="/Content/images/10.jpg">
	<img alt="" src="/Content/images/11.jpg">
	<img alt="" src="/Content/images/12.jpg">

	<img alt="" src="/Content/images/13.jpg">
	<img alt="" src="/Content/images/14.jpg">
	<img alt="" src="/Content/images/1.jpg">
	<img alt="" src="/Content/images/2.jpg">

</div>
    <audio autoplay="autopaly" loop="loop">
					<source src="./Content/love.mp3" type="audio/mp3" />
			</audio>
    <div id="main">
        <div id="error">本页面采用HTML5编辑，目前您的浏览器无法显示，请换成谷歌(<a href="http://www.google.cn/chrome/intl/zh-CN/landing_chrome.html?hl=zh-CN&brand=CHMI">Chrome</a>)或者火狐(<a href="http://firefox.com.cn/download/">Firefox</a>)浏览器，或者其他游览器的最新版本。</div>
        <div id="wrap">
            <div id="text">
                <div id="code">
                    <span class="say">正如一切事情最初的开始.</span><br>
                    <br>
                    <span class="say">不经意相识,或许是缘分，或许是注定的。我们就这样在一起了.</span><br>
                    <br>
                    <span class="say">一路走来,有过甜蜜有过争吵有过欢声有过笑语.</span><br>
                    <br>
                    <span class="say">有过我对爱情所幻想的一切.</span><br>
                    <br>
                    <span class="say">有着我对于你最孑孓无畏的感情.</span><br>
                    <br>
                    <span class="say">记得在你最需要的时候想起我。</span><br>
                    <br>
                    <span class="say">回首相望,有多少浪漫感动凝聚在回忆里.</span><br>
                    <br>
                    <span class="say">感谢有你。</span><br>
                    <br>
                    <span class="say"><span class="space"></span>By Salo </span>
                </div>
            </div>
            <div id="clock-box">
                帅气的大辉辉<span class="STYLE1">与</span>超级无敌漂亮的小珍珍<span class="STYLE1">已经在一起</span>
                <div id="clock"></div>
            </div>
            <canvas id="canvas" width="1100" height="680"></canvas>
        </div>

    </div>

    <script>
        (function () {
            var canvas = $('#canvas');

            if (!canvas[0].getContext) {
                $("#error").show();
                return false;
            }

            var width = canvas.width();
            var height = canvas.height();

            canvas.attr("width", width);
            canvas.attr("height", height);

            var opts = {
                seed: {
                    x: width / 2 - 20,
                    color: "rgb(190, 26, 37)",
                    scale: 2
                },
                branch: [
                    [535, 680, 570, 250, 500, 200, 30, 100, [
                        [540, 500, 455, 417, 340, 400, 13, 100, [
                            [450, 435, 434, 430, 394, 395, 2, 40]
                        ]],
                        [550, 445, 600, 356, 680, 345, 12, 100, [
                            [578, 400, 648, 409, 661, 426, 3, 80]
                        ]],
                        [539, 281, 537, 248, 534, 217, 3, 40],
                        [546, 397, 413, 247, 328, 244, 9, 80, [
                            [427, 286, 383, 253, 371, 205, 2, 40],
                            [498, 345, 435, 315, 395, 330, 4, 60]
                        ]],
                        [546, 357, 608, 252, 678, 221, 6, 100, [
                            [590, 293, 646, 277, 648, 271, 2, 80]
                        ]]
                    ]]
                ],
                bloom: {
                    num: 700,
                    width: 1080,
                    height: 650,
                },
                footer: {
                    width: 1200,
                    height: 5,
                    speed: 10,
                }
            }

            var tree = new Tree(canvas[0], width, height, opts);
            var seed = tree.seed;
            var foot = tree.footer;
            var hold = 1;

            canvas.click(function (e) {
                var offset = canvas.offset(), x, y;
                x = e.pageX - offset.left;
                y = e.pageY - offset.top;
                if (seed.hover(x, y)) {
                    hold = 0;
                    canvas.unbind("click");
                    canvas.unbind("mousemove");
                    canvas.removeClass('hand');
                }
            }).mousemove(function (e) {
                var offset = canvas.offset(), x, y;
                x = e.pageX - offset.left;
                y = e.pageY - offset.top;
                canvas.toggleClass('hand', seed.hover(x, y));
            });

            var seedAnimate = eval(Jscex.compile("async", function () {
                seed.draw();
                while (hold) {
                    $await(Jscex.Async.sleep(10));
                }
                while (seed.canScale()) {
                    seed.scale(0.95);
                    $await(Jscex.Async.sleep(10));
                }
                while (seed.canMove()) {
                    seed.move(0, 2);
                    foot.draw();
                    $await(Jscex.Async.sleep(10));
                }
            }));

            var growAnimate = eval(Jscex.compile("async", function () {
                do {
                    tree.grow();
                    $await(Jscex.Async.sleep(10));
                } while (tree.canGrow());
            }));

            var flowAnimate = eval(Jscex.compile("async", function () {
                do {
                    tree.flower(2);
                    $await(Jscex.Async.sleep(10));
                } while (tree.canFlower());
            }));

            var moveAnimate = eval(Jscex.compile("async", function () {
                tree.snapshot("p1", 240, 0, 610, 680);
                while (tree.move("p1", 500, 0)) {
                    foot.draw();
                    $await(Jscex.Async.sleep(10));
                }
                foot.draw();
                tree.snapshot("p2", 500, 0, 610, 680);

                // 会有闪烁不得意这样做, (＞﹏＜)
                canvas.parent().css("background", "url(" + tree.toDataURL('image/png') + ")");
                canvas.css("background", "#ffe");
                $await(Jscex.Async.sleep(300));
                canvas.css("background", "none");
            }));

            var jumpAnimate = eval(Jscex.compile("async", function () {
                var ctx = tree.ctx;
                while (true) {
                    tree.ctx.clearRect(0, 0, width, height);
                    tree.jump();
                    foot.draw();
                    $await(Jscex.Async.sleep(25));
                }
            }));

            var textAnimate = eval(Jscex.compile("async", function () {
                var together = new Date();
                together.setFullYear(2013, 02, 01); 			//时间年月日
                together.setHours(0);						//小时	
                together.setMinutes(0);					//分钟
                together.setSeconds(0);					//秒前一位
                together.setMilliseconds(0);				//秒第二位

                $("#code").show().typewriter();
                $("#clock-box").fadeIn(500);
                while (true) {
                    //timeElapse(together);
                    $.get("/Home/GetTimeLine", function (data) {
                        $('#clock').html(data);
                    });
                    $await(Jscex.Async.sleep(1000));
                }
            }));

            var runAsync = eval(Jscex.compile("async", function () {
                $await(seedAnimate());
                $await(growAnimate());
                $await(flowAnimate());
                $await(moveAnimate());

                textAnimate().start();

                $await(jumpAnimate());
            }));

            runAsync().start();
        })();
    </script>

    <center></br>&copy; <a href="http://Salo.ren/" target="_blank"> Salo.Z</a></center>
</body>
</html>
<script type="text/javascript">
    var Library = {};
    Library.ease = function () {
        this.target = 0;
        this.position = 0;
        this.move = function (target, speed) {
            this.position += (target - this.position) * speed;
        }
    }

    var tv = {
        /* ==== variables ==== */
        O: [],
        screen: {},
        grid: {
            size: 4,  // 4x4 grid
            borderSize: 6,  // borders size
            zoomed: false
        },
        angle: {
            x: new Library.ease(),
            y: new Library.ease()
        },
        camera: {
            x: new Library.ease(),
            y: new Library.ease(),
            zoom: new Library.ease(),
            focalLength: 750 // camera Focal Length
        },

        /* ==== init script ==== */
        init: function () {
            this.screen.obj = document.getElementById('screen');
            var img = document.getElementById('bankImages').getElementsByTagName('img');
            this.screen.obj.onselectstart = function () { return false; }
            this.screen.obj.ondrag = function () { return false; }
            /* ==== create images grid ==== */
            var ni = 0;
            var n = (tv.grid.size / 2) - .5;
            for (var y = -n; y <= n; y++) {
                for (var x = -n; x <= n; x++) {
                    /* ==== create HTML image element ==== */
                    var o = document.createElement('img');
                    var i = img[(ni++) % img.length];
                    o.className = 'tvout';
                    o.src = i.src;
                    tv.screen.obj.appendChild(o);
                    /* ==== 3D coordinates ==== */
                    o.point3D = {
                        x: x,
                        y: y,
                        z: new Library.ease()
                    };
                    /* ==== push object ==== */
                    o.point2D = {};
                    o.ratioImage = 1;
                    tv.O.push(o);
                    /* ==== on mouse over event ==== */
                    o.onmouseover = function () {
                        if (!tv.grid.zoomed) {
                            if (tv.o) {
                                /* ==== mouse out ==== */
                                tv.o.point3D.z.target = 0;
                                tv.o.className = 'tvout';
                            }
                            /* ==== mouse over ==== */
                            this.className = 'tvover';
                            this.point3D.z.target = -.5;
                            tv.o = this;
                        }
                    }
                    /* ==== on click event ==== */
                    o.onclick = function () {
                        if (!tv.grid.zoomed) {
                            /* ==== zoom in ==== */
                            tv.camera.x.target = this.point3D.x;
                            tv.camera.y.target = this.point3D.y;
                            tv.camera.zoom.target = tv.screen.w * 1.25;
                            tv.grid.zoomed = this;
                        } else {
                            if (this == tv.grid.zoomed) {
                                /* ==== zoom out ==== */
                                tv.camera.x.target = 0;
                                tv.camera.y.target = 0;
                                tv.camera.zoom.target = tv.screen.w / (tv.grid.size + .1);
                                tv.grid.zoomed = false;
                            }
                        }
                    }
                    /* ==== 3D transform function ==== */
                    o.calc = function () {
                        /* ==== ease mouseover ==== */
                        this.point3D.z.move(this.point3D.z.target, .5);
                        /* ==== assign 3D coords ==== */
                        var x = (this.point3D.x - tv.camera.x.position) * tv.camera.zoom.position;
                        var y = (this.point3D.y - tv.camera.y.position) * tv.camera.zoom.position;
                        var z = this.point3D.z.position * tv.camera.zoom.position;
                        /* ==== perform rotations ==== */
                        var xy = tv.angle.cx * y - tv.angle.sx * z;
                        var xz = tv.angle.sx * y + tv.angle.cx * z;
                        var yz = tv.angle.cy * xz - tv.angle.sy * x;
                        var yx = tv.angle.sy * xz + tv.angle.cy * x;
                        /* ==== 2D transformation ==== */
                        this.point2D.scale = tv.camera.focalLength / (tv.camera.focalLength + yz);
                        this.point2D.x = yx * this.point2D.scale;
                        this.point2D.y = xy * this.point2D.scale;
                        this.point2D.w = Math.round(
                                           Math.max(
                                             0,
                                             this.point2D.scale * tv.camera.zoom.position * .8
                                           )
                                         );
                        /* ==== image size ratio ==== */
                        if (this.ratioImage > 1)
                            this.point2D.h = Math.round(this.point2D.w / this.ratioImage);
                        else {
                            this.point2D.h = this.point2D.w;
                            this.point2D.w = Math.round(this.point2D.h * this.ratioImage);
                        }
                    }
                    /* ==== rendering ==== */
                    o.draw = function () {
                        if (this.complete) {
                            /* ==== paranoid image load ==== */
                            if (!this.loaded) {
                                if (!this.img) {
                                    /* ==== create internal image ==== */
                                    this.img = new Image();
                                    this.img.src = this.src;
                                }
                                if (this.img.complete) {
                                    /* ==== get width / height ratio ==== */
                                    this.style.visibility = 'visible';
                                    this.ratioImage = this.img.width / this.img.height;
                                    this.loaded = true;
                                    this.img = false;
                                }
                            }
                            /* ==== HTML rendering ==== */
                            this.style.left = Math.round(
                                                this.point2D.x * this.point2D.scale +
                                                tv.screen.w - this.point2D.w * .5
                                              ) + 'px';
                            this.style.top = Math.round(
                                                this.point2D.y * this.point2D.scale +
                                                tv.screen.h - this.point2D.h * .5
                                              ) + 'px';
                            this.style.width = this.point2D.w + 'px';
                            this.style.height = this.point2D.h + 'px';
                            this.style.borderWidth = Math.round(
                                                       Math.max(
                                                         this.point2D.w,
                                                         this.point2D.h
                                                       ) * tv.grid.borderSize * .01
                                                     ) + 'px';
                            this.style.zIndex = Math.floor(this.point2D.scale * 100);
                        }
                    }
                }
            }
            /* ==== start script ==== */
            tv.resize();
            mouse.y = tv.screen.y + tv.screen.h;
            mouse.x = tv.screen.x + tv.screen.w;
            tv.run();
        },

        /* ==== resize window ==== */
        resize: function () {
            var o = tv.screen.obj;
            tv.screen.w = o.offsetWidth / 2;
            tv.screen.h = o.offsetHeight / 2;
            tv.camera.zoom.target = tv.screen.w / (tv.grid.size + .1);
            for (tv.screen.x = 0, tv.screen.y = 0; o != null; o = o.offsetParent) {
                tv.screen.x += o.offsetLeft;
                tv.screen.y += o.offsetTop;
            }
        },

        /* ==== main loop ==== */
        run: function () {
            /* ==== motion ease ==== */
            tv.angle.x.move(-(mouse.y - tv.screen.h - tv.screen.y) * .0025, .1);
            tv.angle.y.move((mouse.x - tv.screen.w - tv.screen.x) * .0025, .1);
            tv.camera.x.move(tv.camera.x.target, tv.grid.zoomed ? .25 : .025);
            tv.camera.y.move(tv.camera.y.target, tv.grid.zoomed ? .25 : .025);
            tv.camera.zoom.move(tv.camera.zoom.target, .05);
            /* ==== angles sin and cos ==== */
            tv.angle.cx = Math.cos(tv.angle.x.position);
            tv.angle.sx = Math.sin(tv.angle.x.position);
            tv.angle.cy = Math.cos(tv.angle.y.position);
            tv.angle.sy = Math.sin(tv.angle.y.position);
            /* ==== loop through all images ==== */
            for (var i = 0, o; o = tv.O[i]; i++) {
                o.calc();
                o.draw();
            }
            /* ==== loop ==== */
            setTimeout(tv.run, 32);
        }
    }

    /* ==== global mouse position ==== */
    var mouse = {
        x: 0,
        y: 0
    }
    document.onmousemove = function (e) {
        if (window.event) e = window.event;
        mouse.x = e.clientX;
        mouse.y = e.clientY;
        return false;
    }

</script>
<script type="text/javascript">
    /* ==== start script ==== */
    //onresize = tv.resize;
    //tv.init();
</script>